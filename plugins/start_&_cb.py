import random
import asyncio
from pyrogram import Client, filters
from pyrogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from helper.database import hyoshcoder
from config import *
from config import Config

@Client.on_message(filters.private & filters.command("start"))
async def start(client, message: Message):
    user = message.from_user
    await hyoshcoder.add_user(client, message)

    m = await message.reply_text("·¥è…¥·¥á·¥á-·¥Ñ ú·¥Ä…¥ ! ·¥Ñ·¥è·¥ç·¥ç·¥á…¥·¥õ ·¥†·¥Äs-·¥õ·¥ú ? \n·¥Ä·¥õ·¥õ·¥á…¥·¥Ös ·¥ú…¥ …™…¥s·¥õ·¥Ä…¥·¥õ...")
    await asyncio.sleep(0.9)
    await m.edit_text("üëÄ")
    await asyncio.sleep(0.5)
    await m.edit_text("‚ö°")
    await asyncio.sleep(0.5)
    await m.edit_text("B è·¥Ä·¥ã·¥ú…¢·¥Ä…¥...")
    await asyncio.sleep(0.4)
    await m.delete()

    m =await  message.reply_sticker("CAACAgIAAxkBAALmzGXSSt3ppnOsSl_spnAP8wHC26jpAAJEGQACCOHZSVKp6_XqghKoHgQ")
    await asyncio.sleep(0.4)
    await m.delete()

    buttons = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚Ä¢ ·¥ç·¥ás ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥ás ‚Ä¢", callback_data='help')
        ],
        [
            InlineKeyboardButton('‚Ä¢ ·¥ç…™s·¥ás √† ·¥ä·¥è·¥ú Ä', url='https://t.me/hyoshassistantbot'),
            InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/tout_manga_confondu')
        ],
        [
            InlineKeyboardButton('‚Ä¢ ·¥Ä ·¥ò Ä·¥è·¥ò·¥ès', callback_data='about'),
            InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á ‚Ä¢', callback_data='source')
        ]
    ])


    # Send start message with or without picture
    if Config.START_PIC:
        await message.reply_photo(
            Config.START_PIC,
            caption=Txt.START_TXT.format(user.mention),
            reply_markup=buttons
        )
    else:
        await message.reply_text(
            text=Txt.START_TXT.format(user.mention),
            reply_markup=buttons,
            disable_web_page_preview=True
        )


# Callback Query Handler
@Client.on_callback_query()
async def cb_handler(client, query: CallbackQuery):
    data = query.data
    user_id = query.from_user.id

    print(f"Callback data received: {data}")  # Debugging line

    if data == "home":
        await query.message.edit_text(
            text=Txt.START_TXT.format(query.from_user.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  ·¥ç·¥ás ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥ás  ‚Ä¢", callback_data='help')],
                [InlineKeyboardButton('‚Ä¢ ·¥ç…™s·¥ás √† ·¥ä·¥è·¥ú Ä', url='https://t.me/hyoshassistantbot'), InlineKeyboardButton('s·¥ú·¥ò·¥ò·¥è Ä·¥õ ‚Ä¢', url='https://t.me/tout_manga_confondu')],
                [InlineKeyboardButton('‚Ä¢ ·¥Ä ·¥ò Ä·¥è·¥ò·¥ès', callback_data='about'), InlineKeyboardButton('s·¥è·¥ú Ä·¥Ñ·¥á ‚Ä¢', callback_data='source')]
            ])
        )
    elif data == "caption":
        await query.message.edit_text(
            text=Txt.CAPTION_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/tout_manga_confondu'), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="help")]
            ])
        )

    elif data == "help":
        await query.message.edit_text(
            text=Txt.HELP_TXT.format(client.mention),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                            [InlineKeyboardButton("‚Ä¢ “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö·¥á  Ä·¥á…¥·¥è·¥ç·¥ç·¥Ä…¢·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™«´·¥ú·¥á ‚Ä¢", callback_data='file_names')],
                            [InlineKeyboardButton('‚Ä¢ ·¥†…™…¢…¥·¥á·¥õ·¥õ·¥á', callback_data='thumbnail'), InlineKeyboardButton(' ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ‚Ä¢', callback_data='caption')],
                            [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥è…¥…¥·¥áÃÅ·¥ás', callback_data='meta'), InlineKeyboardButton('“ì·¥Ä…™ Ä·¥á ·¥ú…¥ ·¥Ö·¥è…¥ ‚Ä¢', callback_data='donate')],
                            [InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ñ·¥Ñ·¥ú·¥á…™ ü', callback_data='home')]
                        ])

        )

    elif data == "meta":
        await query.message.edit_text(  # Change edit_caption to edit_text
            text=Txt.SEND_METADATA,  # Changed from caption to text
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "donate":
        await query.message.edit_text(
            text=Txt.DONATE_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  Ä·¥á·¥õ·¥è·¥ú Ä", callback_data="help"), InlineKeyboardButton("·¥ò Ä·¥è·¥ò Ä…™·¥á·¥õ·¥Ä…™ Ä·¥á ‚Ä¢", url='https://t.me/hyoshassistantBot')]
            ])
        )
    elif data == "file_names":
        format_template = await hyoshcoder.get_format_template(user_id)
        await query.message.edit_text(
            text=Txt.FILE_NAME_TXT.format(format_template=format_template),
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "thumbnail":
        await query.message.edit_caption(
            caption=Txt.THUMBNAIL_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "metadatax":
        await query.message.edit_caption(
            caption=Txt.SEND_METADATA,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="help")]
            ])
        )
    elif data == "source":
        await query.message.edit_caption(
            caption=Txt.SOURCE_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton(" Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="home")]
            ])
        )
    elif data == "premiumx":
        await query.message.edit_caption(
            caption=Txt.PREMIUM_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢  Ä·¥á·¥õ·¥è·¥ú Ä", callback_data="help"), InlineKeyboardButton("·¥Ä·¥Ñ ú·¥á·¥õ·¥á Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", url='https://t.me/hyoshassistantBot')]
            ])
        )
    elif data == "plans":
        await query.message.edit_caption(
            caption=Txt.PREPLANS_TXT,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ “ì·¥á Ä·¥ç·¥á Ä", callback_data="close"), InlineKeyboardButton("·¥Ä·¥Ñ ú·¥á·¥õ·¥á Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ‚Ä¢", url='https://t.me/hyoshassistantBot')]
            ])
        )
    elif data == "about":
        await query.message.edit_text(
            text=Txt.ABOUT_TXT,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ä¢ s·¥ú·¥ò·¥ò·¥è Ä·¥õ", url='https://t.me/tout_manga_confondu'), InlineKeyboardButton("·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥ás ‚Ä¢", callback_data="help")],
                [InlineKeyboardButton("‚Ä¢ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á Ä", url='https://t.me/hyoshassistantbot'), InlineKeyboardButton("…¥·¥á·¥õ·¥°·¥è Ä·¥ã ‚Ä¢", url='https://t.me/tout_manga_confondu')],
                [InlineKeyboardButton("‚Ä¢  Ä·¥á·¥õ·¥è·¥ú Ä ‚Ä¢", callback_data="home")]
            ])
        )
    elif data == "close":
        try:
            await query.message.delete()
            await query.message.reply_to_message.delete()
            await query.message.continue_propagation()
        except:
            await query.message.delete()
            await query.message.continue_propagation()

# Donation Command Handler
@Client.on_message(filters.command("donate"))
async def donation(client, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton(text=" Ä·¥á·¥õ·¥è·¥ú Ä", callback_data="help"), InlineKeyboardButton(text="·¥ò Ä·¥è·¥ò Ä…™·¥á·¥õ·¥Ä…™ Ä·¥á", url='https://t.me/hyoshassistantBot')]
    ])
    yt = await message.reply_photo(photo='img/2.jpg', caption=Txt.DONATE_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Premium Command Handler
@Client.on_message(filters.command("premium"))
async def getpremium(bot, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("·¥ò Ä·¥è·¥ò Ä…™·¥á·¥õ·¥Ä…™ Ä·¥á", url="https://t.me/hyoshassistantBot"), InlineKeyboardButton("“ì·¥á Ä·¥ç·¥á Ä", callback_data="close")]
    ])
    yt = await message.reply_photo(photo='img/1.jpg', caption=Txt.PREMIUM_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Plan Command Handler
@Client.on_message(filters.command("plan"))
async def premium(bot, message):
    buttons = InlineKeyboardMarkup([
        [InlineKeyboardButton("·¥ò·¥Ä è·¥á Ä ·¥†·¥è·¥õ Ä·¥á ·¥Ä ô·¥è…¥…¥·¥á·¥ç·¥á…¥·¥õ", url="https://t.me/hyoshassistantBot"), InlineKeyboardButton("“ì·¥á Ä·¥ç·¥á Ä", callback_data="close")]
    ])
    yt = await message.reply_photo(photo='img/2.jpg', caption=Txt.PREPLANS_TXT, reply_markup=buttons)
    await asyncio.sleep(300)
    await yt.delete()
    await message.delete()

# Bought Command Handler
@Client.on_message(filters.command("bought") & filters.private)
async def bought(client, message):
    msg = await message.reply('·¥Ä·¥õ·¥õ·¥á…¥·¥Ö, ·¥ä·¥á ·¥†·¥á Ä…™“ì…™·¥á...')
    replied = message.reply_to_message

    if not replied:
        await msg.edit("<b>·¥†·¥á·¥ú…™ ü ü·¥á·¥¢  Ä·¥á·¥ò·¥è…¥·¥Ö Ä·¥á ·¥Ä·¥†·¥á·¥Ñ  ü·¥Ä ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö'·¥áÃÅcran ·¥Ö·¥á ·¥†·¥è·¥õ Ä·¥á ·¥ò·¥Ä è·¥á·¥ç·¥á…¥·¥õ ·¥ò·¥è·¥ú Ä  ü'·¥Ä·¥Ñ ú·¥Ä·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥ò·¥è·¥ú Ä ·¥Ñ·¥è…¥·¥õ…™…¥·¥ú·¥á Ä.\n\n·¥ò·¥Ä Ä ·¥áx·¥Ä·¥ç·¥ò ü·¥á, ·¥õ·¥áÃÅ ü·¥á·¥Ñ ú·¥Ä Ä…¢·¥á·¥¢ ·¥Ö'·¥Ä ô·¥è Ä·¥Ö ·¥†·¥è·¥õ Ä·¥á ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö'·¥áÃÅcran, ·¥ò·¥ú…™s  Ä·¥á·¥ò·¥è…¥·¥Ö Ä·¥á ·¥Ä·¥†·¥á·¥Ñ  ü·¥Ä ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö·¥á '/bought</b>")
    elif replied.photo:
        await client.send_photo(
            chat_id=Config.LOG_CHANNEL,
            photo=replied.photo.file_id,
            caption=f'<b>·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - {message.from_user.mention}\n…™·¥Ö ·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - <code>{message.from_user.id}</code>\n…¥·¥è·¥ç ·¥ú·¥õ…™ ü…™s·¥Ä·¥õ·¥á·¥ú Ä - <code>{message.from_user.username}</code>\n·¥ò Ä·¥á…¥·¥è·¥ç - <code>{message.from_user.first_name}</code></b>',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("Close", callback_data="close_data")]
            ])
        )
        await msg.edit_text('<b>V·¥è·¥õ Ä·¥á ·¥Ñ·¥Ä·¥ò·¥õ·¥ú Ä·¥á ·¥Ö\'·¥áÃÅ·¥õ·¥è…™ ü·¥á ·¥Ä ·¥á·¥õ·¥á ·¥á…¥·¥†·¥è è·¥áÃÅ·¥á ·¥Ä·¥úx ·¥Ä·¥Ö·¥ç…™…¥s</b>')

@Client.on_message(filters.private & filters.command("help"))
async def help_command(client, message):
    # Await get_me to get the bot's user object
    bot = await client.get_me()
    mention = bot.mention

    # Send the help message with inline buttons
    await message.reply_text(
        text=Txt.HELP_TXT.format(mention=mention),
        disable_web_page_preview=True,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ä¢ “ì·¥è Ä·¥ç·¥Ä·¥õ ·¥Ö·¥á  Ä·¥á…¥·¥è·¥ç·¥ç·¥Ä…¢·¥á ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™«´·¥ú·¥á ‚Ä¢", callback_data='file_names')],
            [InlineKeyboardButton('‚Ä¢ ·¥†…™…¢…¥·¥á·¥õ·¥õ·¥á', callback_data='thumbnail'), InlineKeyboardButton(' ü·¥áÃÅ…¢·¥á…¥·¥Ö·¥á ‚Ä¢', callback_data='caption')],
            [InlineKeyboardButton('‚Ä¢ ·¥ç·¥á·¥õ·¥Ä·¥Ö·¥è…¥…¥·¥áÃÅ·¥ás', callback_data='meta'), InlineKeyboardButton('“ì·¥Ä…™ Ä·¥á ·¥ú…¥ ·¥Ö·¥è…¥ ‚Ä¢', callback_data='donate')],
            [InlineKeyboardButton('‚Ä¢ ·¥Ä·¥Ñ·¥Ñ·¥ú·¥á…™ ü', callback_data='home')]
        ])
    )
